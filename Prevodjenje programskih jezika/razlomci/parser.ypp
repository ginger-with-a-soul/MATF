%{
#include <iostream>
#include <string>
#include <cstdlib>
#include <map>
#include "razlomci.hpp"

extern int yylex();

void yyerror(std::string errMsg){
	std::cerr << "Error: " << errMsg << std::endl;
	exit(EXIT_FAILURE);
}

std::map<std::string, Razlomak> table;
%}

%union {
	int int_type;
	std::string* string_type;
	Razlomak* r_type;
}

%token PRINT_T NOM_T DEN_T DOUBLE_T EQUALS_T
%token <int_type> NUMBER_T
%token <string_type> ID_T
%type <r_type> Izraz Razlomak

%left '+' '-'
%left '*' '/'

%%

Program : Naredba '\n' Program { }
		| Naredba '\n' { }
		;

Naredba : Izraz { delete $1; }
		| PRINT_T '(' Izraz ')' {if ($3 != nullptr) {std::cout << *$3 << std::endl; delete $3;}}
		| NOM_T '(' Izraz ')' {if ($3 != nullptr) {std::cout << $3->brojilac << std::endl; delete $3;}}
		| DEN_T '(' Izraz ')' {if ($3 != nullptr) {std::cout << $3->imenilac << std::endl; delete $3;}}
		| EQUALS_T '(' Izraz ',' Izraz ')' {
			if($3 != nullptr && $5 != nullptr){
				if($3->brojilac == $5->brojilac && $3->imenilac == $5->imenilac){
					std::cout << "True" << std::endl;
				}
				else{
					std::cout << "False" << std::endl;
				}
				delete $3; delete $5;
			}
			else{
				if($3 != nullptr) delete $3;
				if($5 != nullptr) delete $5;

			}
		}
		| DOUBLE_T '(' Izraz ')' {if ($3 != nullptr) {std::cout << (double) *$3 << std::endl; delete $3;}}
		| ID_T '=' Razlomak {if ($3 != nullptr) {table[*$1] = *$3; delete $3;} delete $1;}
		;

Izraz : '(' Izraz ')' {$$ = $2;}
      | Izraz '+' Izraz {
		  if($1 != nullptr && $3 != nullptr){
			  $$ = new Razlomak(*$1 + *$3);
			  delete $1; delete $3;
		  }
		  else{
			  if($1 != nullptr) delete $1;
			  if($3 != nullptr) delete $3;
			  $$ = nullptr;
		  }
	  }
	  | Izraz '-' Izraz {
		  if($1 != nullptr && $3 != nullptr){
			  $$ = new Razlomak(*$1 - *$3);
			  delete $1; delete $3;
		  }
		  else{
			  if($1 != nullptr) delete $1;
			  if($3 != nullptr) delete $3;
			  $$ = nullptr;
		  }
	  }
	  | Izraz '*' Izraz {
		  if($1 != nullptr && $3 != nullptr){
			  $$ = new Razlomak(*$1 * *$3);
			  delete $1; delete $3;
		  }
		  else{
			  if($1 != nullptr) delete $1;
			  if($3 != nullptr) delete $3;
			  $$ = nullptr;
		  }
	  }
	  | Izraz '/' Izraz {
		  if($1 != nullptr && $3 != nullptr){
			  try {
				  $$ = new Razlomak(*$1 / *$3);
			  } catch (std::string& errMsg){
				  std::cerr << errMsg << std::endl;
				  $$ = nullptr;
			  }
			delete $1; delete $3;
		  }
		  else{
			  if($1 != nullptr) delete $1;
			  if($3 != nullptr) delete $3;
			  $$ = nullptr;
		  }
	  }
	  | Razlomak {$$ = $1;}
	  ;

Razlomak : '[' NUMBER_T ',' NUMBER_T ']' { 
            try {
                $$ = new Razlomak($2, $4); 
            } catch (std::string& err_msg) {
                std::cerr << err_msg << std::endl;
                $$ = nullptr;
            }
         }
		 | '[' NUMBER_T ']' {$$ = new Razlomak($2);}
		 | ID_T {
			 auto it = table.find(*$1);
			 if(it == table.end()){
				 std::cerr << "Variable: " << *$1 << " not declared!" << std::endl;
				 $$ = nullptr;
			 }
			 else{
				 $$ = new Razlomak(it->second);
			 }
			 delete $1;
		 }
		 ;

%%

int main(){

	yyparse();

	exit(EXIT_SUCCESS);
}